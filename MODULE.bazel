module(
    name = "fjarm",
    version = "20240521.0.0",
)

bazel_dep(name = "rules_go", version = "0.51.0")
bazel_dep(name = "gazelle", version = "0.41.0")
bazel_dep(name = "rules_oci", version = "2.0.0-beta1")
bazel_dep(name = "aspect_bazel_lib", version = "2.10.0")
bazel_dep(name = "platforms", version = "0.0.10")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

# Download an SDK for the host OS & architecture as well as common remote execution platforms.
go_sdk.download(version = "1.24.0")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "build_buf_gen_go_fjarm_fjarm_connectrpc_go",
    "build_buf_gen_go_fjarm_fjarm_protocolbuffers_go",
    "com_connectrpc_connect",
    "com_github_bufbuild_protovalidate_go",
    "com_github_redis_rueidis",
    "com_github_testcontainers_testcontainers_go_modules_redis",
    "org_golang_google_protobuf",
    "org_golang_x_crypto",
)

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_static",
    # SEE: https://console.cloud.google.com/artifacts/docker/distroless/us/gcr.io/static/sha256:5c7e2b465ac6a2a4e5f4f7f722ce43b147dabe87cb21ac6c4007ae5178a1fa58
    digest = "sha256:5c7e2b465ac6a2a4e5f4f7f722ce43b147dabe87cb21ac6c4007ae5178a1fa58",
    image = "gcr.io/distroless/static",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
use_repo(
    oci,
    "distroless_static",
    "distroless_static_linux_amd64",
    "distroless_static_linux_arm64_v8",
)

# This dependency is only needed because testcontainers-go adds a transitive dependency on gogo/protobuf.
bazel_dep(name = "toolchains_protoc", version = "0.3.7")

# Optional: choose a version of protoc rather than the latest.
protoc = use_extension("@toolchains_protoc//protoc:extensions.bzl", "protoc")
protoc.toolchain(
    # Creates a repository to satisfy well-known-types dependencies such as
    # deps=["@com_google_protobuf//:any_proto"]
    # Add com_google_protobuf to the `use_repo` call below
    # google_protobuf = "com_google_protobuf",
    # Pin to any version of protoc
    version = "v29.3",
)
use_repo(protoc, "toolchains_protoc_hub")

register_toolchains("@toolchains_protoc_hub//:all")

register_toolchains("//tools/toolchains:all")
